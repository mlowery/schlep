#!/usr/bin/env bash

# http://redsymbol.net/articles/unofficial-bash-strict-mode/

set -euo pipefail
IFS=$'\n\t'

# Sourcing A Nonconforming Document
#set +u
#source /path/to/venv/bin/activate
#set -u

# Positional Parameters
# ${VARNAME:-DEFAULT_VALUE} evals to DEFAULT_VALUE if VARNAME undefined.
# So here, $bar is set to "alpha":
# bar=${foo:-alpha}

# Commands You Expect To Have Nonzero Exit Status
# set +e
# count=$(grep -c some-string some-file)
# retval=$?
# set -e


exit_funcs=()

finish() {
    # nothing to do
    true
}

#exit_funcs+=("finish")

exit_trap() {
    # syntax from http://stackoverflow.com/a/34361807 (handles empty array)
    for exit_func in ${exit_funcs[@]+"${exit_funcs[@]}"}
    do
        eval "$exit_func"
    done
}

trap "exit_trap" EXIT

# Some functions borrowed from DevStack (https://github.com/openstack-dev/devstack)

# Prints line number and "message" then exits
# die $LINENO "message"
function die {
    local exitcode=$?
    local line=$1; shift
    if [ $exitcode == 0 ]; then
        exitcode=1
    fi
    err $line "$*"
    # Give buffers a second to flush
    sleep 1
    exit $exitcode
}

# Prints line number and "message" in error format
# err $LINENO "message"
function err {
    local exitcode=$?
    # 2 because 0 is func "err" and 1 is func "die"
    local msg="ERROR ${BASH_SOURCE[2]}:$1 $2"
    echo $msg 1>&2;
    return $exitcode
}

trap 'die ${LINENO} "script failed"' ERR

# -----

my_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

schlep_files=${SCHLEP_FILES:-$my_dir/schlep-files}

source $schlep_files/schlep-lib.sh

USAGE="
NAME
    schlep - set up git push-to-deploy

USAGE
    schlep <bare-remote>
           [-s|--host-string <user@host>]
           [-w|--work-dir <remote-work-dir>]
           [-r|--remote-name <remote-name>]
           [-h|--help]

DEFAULTS
    --remote-name: \"test\"
"

usage() {
    local extra=${1:-}
    if [[ $extra ]]; then
        printf "$extra\n"
    fi
    printf "$USAGE\n"
    if [[ $extra ]]; then
        exit 1
    else
        exit 0
    fi
}

if [[ ${1-} == -h || ${1-} == --help ]]; then
    usage
fi

# first arg should never be a flag
if [[ ${1-} =~ ^-.*$ ]]; then
    usage "ERROR: <bare-remote> is required"
fi

bare_remote=${1-}
if [[ ! $bare_remote ]]; then
    usage "ERROR: <bare-remote> is required"
fi

shift

remote_name=test
work_remote=""
user_and_host=""
subhook_files=()

while (( $# > 0 )); do
key="$1"
shift

case $key in
    -s|--host-string)
    user_and_host="$1"
    shift
    ;;
    -w|--work-dir)
    work_remote="$1"
    shift
    ;;
    -r|--remote_name)
    remote_name=$1
    shift
    ;;
    -f|--file)
    subhook_files+=($1)
    shift
    ;;
    -h|--help)
    usage
    ;;
    *)
    usage "ERROR: Unknown option: $key"
    ;;
esac
done

sanity_check


log_info "creating bare repo [$bare_remote] and adding master post-receive hook"
bare_init_cmd="
if [[ ! -d $bare_remote ]]; then
    mkdir -p $bare_remote
    (cd $bare_remote && git init --bare)
    mkdir $bare_remote/hooks/post-receive.d
fi
"

run "$user_and_host" "$bare_init_cmd"
copy $schlep_files/post-receive $user_and_host:$bare_remote/hooks
copy $schlep_files/schlep-lib.sh $user_and_host:$bare_remote/hooks

if [[ $work_remote ]]; then
    log_info "adding default subhook [15-fetch.sh] (clone/fetch from bare repo to [$work_remote])"
    run "$user_and_host" "
echo export SCHLEP_WORK_DIR=$work_remote > $bare_remote/hooks/post-receive.d/10-work-dir.source.sh
chmod +x $bare_remote/hooks/post-receive.d/10-work-dir.source.sh
"
    copy $schlep_files/15-fetch.sh $user_and_host:$bare_remote/hooks/post-receive.d
fi

# syntax from http://stackoverflow.com/a/34361807 (handles empty array)
for subhook_file in ${subhook_files[@]+"${subhook_files[@]}"}; do
    log_info "adding subhook file [$subhook_file]"
    copy $subhook_file $user_and_host:$bare_remote/hooks/post-receive.d
    if [[ ! -x $subhook_file ]]; then
        run "$user_and_host" "chmod +x $bare_remote/hooks/post-receive.d/$(basename $subhook_file)"
    fi
done

log_info "adding remote named [$remote_name]"

if [[ $user_and_host ]]; then
    remote_path=$user_and_host:$bare_remote
else
    remote_path=$bare_remote
fi

if ! git remote -v | grep "^$remote_name[[:blank:]]" > /dev/null; then
    git remote add $remote_name $remote_path
fi

git config --local remote.$remote_name.push +HEAD:refs/heads/master

# -----

trap - ERR

# Short-Circuiting Considerations
# don't remove this line; guard against short circuit as last line of file
true