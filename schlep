#!/usr/bin/env bash

# stolen from http://redsymbol.net/articles/unofficial-bash-strict-mode/

set -euo pipefail
IFS=$'\n\t'

exit_trap() {
    true
}

trap "exit_trap" EXIT

# Some functions stolen from DevStack (https://github.com/openstack-dev/devstack)

# Prints line number and "message" then exits
# die $LINENO "message"
function die {
    local exitcode=$?
    local line=$1; shift
    if [ $exitcode == 0 ]; then
        exitcode=1
    fi
    err $line "$*"
    # Give buffers a second to flush
    sleep 1
    exit $exitcode
}

# Prints line number and "message" in error format
# err $LINENO "message"
function err {
    local exitcode=$?
    # 2 because 0 is func "err" and 1 is func "die"
    local msg="ERROR ${BASH_SOURCE[2]}:$1 $2"
    echo $msg 1>&2;
    return $exitcode
}

trap 'die ${LINENO} "script failed"' ERR

# -----

my_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

schlep_files=${SCHLEP_FILES:-$my_dir/schlep-files}

source $schlep_files/schlep-lib.sh

USAGE="
NAME
    schlep - set up git push-to-deploy

USAGE
    schlep [user@host:/remote/git/repo/dir | /local/git/repo/dir]
           [-r|--remote-name <remote-name>]
           [-f|--file <subhook-file>...]
           [-h|--help]

DEFAULTS
    --remote-name: \"test\"
"

usage() {
    local extra=${1:-}
    if [[ $extra ]]; then
        printf "$extra\n"
    fi
    printf "$USAGE\n"
    if [[ $extra ]]; then
        exit 1
    else
        exit 0
    fi
}

if [[ ${1-} == -h || ${1-} == --help ]]; then
    usage
fi

# first arg should never be a flag
if [[ ${1-} =~ ^-.*$ ]]; then
    usage "ERROR: <git-repo-dir> is required"
fi

connection=${1-}
if [[ ! $connection ]]; then
    usage "ERROR: <git-repo-dir> is required"
fi

shift

remote_name=test
subhook_files=()

while (( $# > 0 )); do
key="$1"
shift

case $key in
    -r|--remote_name)
    remote_name=$1
    shift
    ;;
    -f|--file)
    subhook_files+=($1)
    shift
    ;;
    -h|--help)
    usage
    ;;
    *)
    usage "ERROR: Unknown option: $key"
    ;;
esac
done

if is_local "$connection"; then
    user_and_host=""
    git_repo_dir="$connection"
else
    user_and_host="${connection%%:*}"
    git_repo_dir="${connection##*:}"
fi

sanity_check "$user_and_host"


log_info "creating git repo [$git_repo_dir] and adding master push-to-checkout hook"
init_cmd="
if [[ ! -d $git_repo_dir ]]; then
    mkdir -p $git_repo_dir
fi
if [[ ! -d $git_repo_dir/.git ]]; then
    (cd $git_repo_dir && git init)
fi
(cd $git_repo_dir && git config receive.denyCurrentBranch updateInstead)
if [[ ! -d $git_repo_dir/.git/hooks/push.d ]]; then
    mkdir $git_repo_dir/.git/hooks/push.d
fi
"

run "$user_and_host" "$init_cmd"
copy $schlep_files/push-to-checkout $connection/.git/hooks
copy $schlep_files/schlep-lib.sh $connection/.git/hooks

# syntax from http://stackoverflow.com/a/34361807 (handles empty array)
for subhook_file in ${subhook_files[@]+"${subhook_files[@]}"}; do
    log_info "adding subhook file [$subhook_file]"
    copy $subhook_file $connection/.git/hooks/push.d
    if [[ ! -x $subhook_file ]]; then
        run "$user_and_host" "chmod +x $git_repo_dir/.git/hooks/push.d/$(basename $subhook_file)"
    fi
done

log_info "adding remote named [$remote_name]"

if ! git remote -v | grep "^$remote_name[[:blank:]]" > /dev/null; then
    git remote add $remote_name $connection
fi

# this means HEAD is always force-pushed to master; this is necessary when 
# working with multiple branches since master is the only branch that is ever 
# checked out on the receiving repo
git config --local remote.$remote_name.push +HEAD:refs/heads/master

# -----

trap - ERR

# Short-Circuiting Considerations
# don't remove this line; guard against short circuit as last line of file
true